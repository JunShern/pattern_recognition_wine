function centroid_data = init_centroids(X,k)
random_indices = randperm(size(X,1));
centroid_data = X(random_indices(1:k,1));
end

function centroid_data = new_centroids(X,cluster_indices,k)
centroid_data = zeros(k,size(X,2));
for i=1:k
    cluster_members = X(cluster_indices==k,:);
    cluster_mean = mean(cluster_members,1);
    centroid_data(i,:) = cluster_mean;
end 
end

function cluster_indices = assign_clusters(X,centroid_data,dist_func);
% POTENTIALLY SLOW BOTTLENECK
cluster_indices = zeros(size(X,1),1);
for i=1:size(X,1)
    datapoint = X(i,:);
    distances = dist_func(datapoint,centroid_data);
    [~,cluster_indices(1] = min(distances);

function [cluster_indices, centroid_data] = kmeans_custom(X,k,dist_func)
% Rows are elements
% Columns are features
cluster_indices = zeros(size(X,1),1);
centroid_data= init_centroids(X,k);
for ind_y = 1:size(X,1)
    A = normr(Y(ind_y,:));
    B = normr(X);
    
    vals = dist_func(A,B);
    inds = 1:size(vals,2);
    neighbors = vertcat(vals, inds);
    neighbors = sortrows(neighbors',1)';
    %[~, closest_ind] = min(dist_func(A,B));
    indices(ind_y,:) = neighbors(2,:);
end
% Take k nearest neighbors
indices = indices(:,1:k);

end